<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <name>ParkingManagementSystem</name>
    <groupId>dk.sdu.mmmi.pms</groupId>
    <artifactId>pms</artifactId>
    <version>1.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <repositories>
    </repositories>

    <modules>
        <module>core/dk.sdu.mmmi.pms.core.account</module>
        <module>core/dk.sdu.mmmi.pms.core.booking</module>
        <module>core/dk.sdu.mmmi.pms.core.parkinglot</module>
        <module>core/dk.sdu.mmmi.pms.core.parkingspot</module>
        <module>core/dk.sdu.mmmi.pms.core.vehicle</module>
        <module>application/dk.sdu.mmmi.pms.application.account</module>
        <module>application/dk.sdu.mmmi.pms.application.shared</module>
        <module>infrastructure/dk.sdu.mmmi.pms.infrastructure.account</module>
        <module>infrastructure/dk.sdu.mmmi.pms.infrastructure.database</module>
        <module>infrastructure/dk.sdu.mmmi.pms.infrastructure.security</module>
        <module>presentation/dk.sdu.mmmi.pms.presentation.account</module>
        <module>presentation/dk.sdu.mmmi.pms.presentation.main</module>
    </modules>

    <properties>
        <project.version>1.0.1-SNAPSHOT</project.version>
        <java>java</java>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>

        <spring-context.version>6.2.5</spring-context.version>
        <spring-boot.version>3.4.4</spring-boot.version>
        <spring-data.version>3.4.4</spring-data.version>
        <spring-security.version>6.4.4</spring-security.version>
        <jakarta.persistence-api.version>3.2.0</jakarta.persistence-api.version>

        <postgresql.version>42.7.5</postgresql.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--Dependency Name-->
            <!--            <dependency>-->
            <!--                <groupId>org.example</groupId>-->
            <!--                <artifactId>example-context</artifactId>-->
            <!--                <version>${example.version}</version>-->
            <!--            </dependency>-->
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <!-- Enables 'mvn clean' command to delete generated build files
                 By default, removes the 'target' directory in each module -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.2.0</version>
            </plugin>

            <!-- Compiles Java source code across all modules -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <fork>true</fork>
                </configuration>
            </plugin>

            <!-- Plugin for executing the application from Maven command line (mvn exec:exec) -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <!-- Prevents this configuration from being inherited by child modules -->
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <goals>
                            <!-- Uses the exec goal which executes programs and Java applications -->
                            <goal>exec</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- Uses the java executable defined in properties (${java}) -->
                    <executable>${java}</executable>
                    <!-- Sets working directory to project root -->
                    <workingDirectory>.</workingDirectory>
                    <!-- Suppresses full path output when displaying module path -->
                    <longModulepath>false</longModulepath>
                    <arguments>
                        <!-- Sets directory where native libraries (JNI) will be searched -->
                        <argument>-Djava.library.path=libs</argument>
                        <!-- Specifies directory containing compiled Java modules -->
                        <argument>--module-path=compiled-modules</argument>
                        <!-- Adds all JAR files in libs directory to application classpath -->
                        <argument>--class-path=libs/*</argument>
                        <!-- Defines the main module and class to run the application -->
                        <argument>
                            --module=dk.sdu.mmmi.pms.presentation.main/dk.sdu.mmmi.pms.presentation.main.ParkingManagementSystemApplication
                        </argument>
                    </arguments>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <!-- Profile: Parent Project Cleanup -->
        <!--
             Extends the Maven Clean Plugin for the parent project only
             - Automatically activated when there is no 'src' folder (parent POM only)
             - Ensures that shared build directories are cleaned during 'mvn clean'
             - Works together with the child-project profile which populates these directories
        -->
        <profile>
            <id>parent-project</id>
            <activation>
                <file>
                    <!-- Activates only for the parent project which typically has no src directory -->
                    <missing>src</missing>
                </file>
            </activation>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-clean-plugin</artifactId>
                        <version>3.2.0</version>
                        <configuration>
                            <filesets>
                                <!-- Removes the compiled modules directory where built artifacts are collected -->
                                <fileset>
                                    <directory>compiled-modules</directory>
                                </fileset>
                                <!-- Removes the libs directory -->
                                <fileset>
                                    <directory>libs</directory>
                                </fileset>
                            </filesets>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Profile: Module Integration -->
        <!--
             Ensures each module's JAR is collected in the shared execution environment
             - Automatically activated when there is no 'src' folder (modules)
             - Copies each module's compiled JAR to the central 'compiled-modules' directory
             - Critical for modular application execution via exec-maven-plugin
        -->
        <profile>
            <id>child-project</id>
            <activation>
                <file>
                    <!-- Activates for any module containing source code (all modules) -->
                    <exists>src</exists>
                </file>
            </activation>

            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <version>3.0.2</version>
                        <executions>
                            <execution>
                                <id>copy-installed</id>
                                <!-- Runs during install phase after module is built -->
                                <phase>install</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <!-- Copies the module's JAR to the compiled-modules directory -->
                                        <artifactItem>
                                            <groupId>${project.groupId}</groupId>
                                            <artifactId>${project.artifactId}</artifactId>
                                            <version>${project.version}</version>
                                            <type>jar</type>
                                        </artifactItem>
                                    </artifactItems>
                                    <!-- Specifies where to copy the JAR -->
                                    <outputDirectory>../../compiled-modules</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
